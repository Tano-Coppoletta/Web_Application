{"ast":null,"code":"/**\n * All the API calls\n */\nimport dayjs from 'dayjs';\nconst APIURL = new URL('http://localhost:3001/api/'); // Do not forget '/' at the end\n\nasync function getAllCourses() {\n  // call: GET /api/courses\n  const response = await fetch(new URL('courses', APIURL), {\n    credentials: 'include'\n  });\n  const coursesJson = await response.json();\n\n  if (response.ok) {\n    return coursesJson.map(co => ({\n      code: co.code,\n      name: co.name,\n      CFU: co.CFU\n    }));\n  } else {\n    throw coursesJson; // an object with the error coming from the server\n  }\n}\n\nasync function getAllExams() {\n  // call: GET /api/exams\n  const response = await fetch(new URL('exams', APIURL), {\n    credentials: 'include'\n  });\n  const examsJson = await response.json();\n\n  if (response.ok) {\n    return examsJson.map(ex => ({\n      code: ex.code,\n      name: ex.name,\n      score: ex.score,\n      date: dayjs(ex.date)\n    }));\n  } else {\n    throw examsJson; // an object with the error coming from the server\n  }\n}\n\nfunction deleteExam(coursecode) {\n  // call: DELETE /api/exams/:coursecode\n  return new Promise((resolve, reject) => {\n    fetch(new URL('exams/' + coursecode, APIURL), {\n      method: 'DELETE',\n      credentials: 'include'\n    }).then(response => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        // analyze the cause of error\n        response.json().then(message => {\n          reject(message);\n        }) // error message in the response body\n        .catch(() => {\n          reject({\n            error: \"Cannot parse server response.\"\n          });\n        }); // something else\n      }\n    }).catch(() => {\n      reject({\n        error: \"Cannot communicate with the server.\"\n      });\n    }); // connection errors\n  });\n}\n\nfunction addExam(exam) {\n  // call: POST /api/exams\n  return new Promise((resolve, reject) => {\n    fetch(new URL('exams', APIURL), {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        code: exam.code,\n        score: exam.score,\n        date: exam.date.format('YYYY-MM-DD')\n      })\n    }).then(response => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        // analyze the cause of error\n        response.json().then(message => {\n          reject(message);\n        }) // error message in the response body\n        .catch(() => {\n          reject({\n            error: \"Cannot parse server response.\"\n          });\n        }); // something else\n      }\n    }).catch(() => {\n      reject({\n        error: \"Cannot communicate with the server.\"\n      });\n    }); // connection errors\n  });\n}\n\nfunction updateExam(exam) {\n  // call: PUT /api/exams/:coursecode\n  return new Promise((resolve, reject) => {\n    fetch(new URL('exams/' + exam.code, APIURL), {\n      method: 'PUT',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        code: exam.code,\n        score: exam.score,\n        date: exam.date.format('YYYY-MM-DD')\n      })\n    }).then(response => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        // analyze the cause of error\n        response.json().then(obj => {\n          reject(obj);\n        }) // error message in the response body\n        .catch(() => {\n          reject({\n            error: \"Cannot parse server response.\"\n          });\n        }); // something else\n      }\n    }).catch(() => {\n      reject({\n        error: \"Cannot communicate with the server.\"\n      });\n    }); // connection errors\n  });\n}\n\nasync function logIn(credentials) {\n  let response = await fetch(new URL('sessions', APIURL), {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n\n  if (response.ok) {\n    const user = await response.json();\n    return user;\n  } else {\n    const errDetail = await response.json();\n    throw errDetail.message;\n  }\n}\n\nasync function logOut() {\n  await fetch(new URL('sessions/current', APIURL), {\n    method: 'DELETE',\n    credentials: 'include'\n  });\n}\n\nasync function getUserInfo() {\n  const response = await fetch(new URL('sessions/current', APIURL), {\n    credentials: 'include'\n  });\n  const userInfo = await response.json();\n\n  if (response.ok) {\n    return userInfo;\n  } else {\n    throw userInfo; // an object with the error coming from the server\n  }\n}\n\nconst API = {\n  getAllCourses,\n  getAllExams,\n  deleteExam,\n  addExam,\n  updateExam,\n  logIn,\n  logOut,\n  getUserInfo\n};\nexport default API;","map":{"version":3,"sources":["/home/gaetano/Desktop/Projects/Web_Application/weeks/week13/client/src/API.js"],"names":["dayjs","APIURL","URL","getAllCourses","response","fetch","credentials","coursesJson","json","ok","map","co","code","name","CFU","getAllExams","examsJson","ex","score","date","deleteExam","coursecode","Promise","resolve","reject","method","then","message","catch","error","addExam","exam","headers","body","JSON","stringify","format","updateExam","obj","logIn","user","errDetail","logOut","getUserInfo","userInfo","API"],"mappings":"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","sourcesContent":["/**\n * All the API calls\n */\nimport dayjs from 'dayjs';\n\nconst APIURL = new URL('http://localhost:3001/api/');  // Do not forget '/' at the end\n\nasync function getAllCourses() {\n  // call: GET /api/courses\n  const response = await fetch(new URL('courses', APIURL), {credentials: 'include'});\n  const coursesJson = await response.json();\n  if (response.ok) {\n    return coursesJson.map((co) => ({ code: co.code, name: co.name, CFU: co.CFU }));\n  } else {\n    throw coursesJson;  // an object with the error coming from the server\n  }\n}\n\nasync function getAllExams() {\n  // call: GET /api/exams\n  const response = await fetch(new URL('exams', APIURL), {credentials: 'include'});\n  const examsJson = await response.json();\n  if (response.ok) {\n    return examsJson.map((ex) => ({ code: ex.code, name: ex.name, score: ex.score, date: dayjs(ex.date) }));\n  } else {\n    throw examsJson;  // an object with the error coming from the server\n  }\n}\n\nfunction deleteExam(coursecode) {\n  // call: DELETE /api/exams/:coursecode\n  return new Promise((resolve, reject) => {\n    fetch(new URL('exams/' + coursecode, APIURL), {\n      method: 'DELETE',\n      credentials: 'include'\n    }).then((response) => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        // analyze the cause of error\n        response.json()\n          .then((message) => { reject(message); }) // error message in the response body\n          .catch(() => { reject({ error: \"Cannot parse server response.\" }) }); // something else\n      }\n    }).catch(() => { reject({ error: \"Cannot communicate with the server.\" }) }); // connection errors\n  });\n}\n\nfunction addExam(exam) {\n  // call: POST /api/exams\n  return new Promise((resolve, reject) => {\n    fetch(new URL('exams', APIURL), {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ code: exam.code, score: exam.score, date: exam.date.format('YYYY-MM-DD') }),\n    }).then((response) => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        // analyze the cause of error\n        response.json()\n          .then((message) => { reject(message); }) // error message in the response body\n          .catch(() => { reject({ error: \"Cannot parse server response.\" }) }); // something else\n      }\n    }).catch(() => { reject({ error: \"Cannot communicate with the server.\" }) }); // connection errors\n  });\n}\n\nfunction updateExam(exam) {\n  // call: PUT /api/exams/:coursecode\n  return new Promise((resolve, reject) => {\n    fetch(new URL('exams/' + exam.code, APIURL), {\n      method: 'PUT',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ code: exam.code, score: exam.score, date: exam.date.format('YYYY-MM-DD') }),\n    }).then((response) => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        // analyze the cause of error\n        response.json()\n          .then((obj) => { reject(obj); }) // error message in the response body\n          .catch(() => { reject({ error: \"Cannot parse server response.\" }) }); // something else\n      }\n    }).catch(() => { reject({ error: \"Cannot communicate with the server.\" }) }); // connection errors\n  });\n}\n\nasync function logIn(credentials) {\n  let response = await fetch(new URL('sessions', APIURL), {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(credentials),\n  });\n  if (response.ok) {\n    const user = await response.json();\n    return user;\n  } else {\n    const errDetail = await response.json();\n    throw errDetail.message;\n  }\n}\n\nasync function logOut() {\n  await fetch(new URL('sessions/current', APIURL), { method: 'DELETE', credentials: 'include' });\n}\n\nasync function getUserInfo() {\n  const response = await fetch(new URL('sessions/current', APIURL), {credentials: 'include'});\n  const userInfo = await response.json();\n  if (response.ok) {\n    return userInfo;\n  } else {\n    throw userInfo;  // an object with the error coming from the server\n  }\n}\n\nconst API = { getAllCourses, getAllExams, deleteExam, addExam, updateExam, logIn, logOut, getUserInfo };\nexport default API;"]},"metadata":{},"sourceType":"module"}