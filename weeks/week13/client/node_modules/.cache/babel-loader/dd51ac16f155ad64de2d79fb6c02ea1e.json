{"ast":null,"code":"var _jsxFileName = \"/home/gaetano/Desktop/Projects/Web_Application/weeks/week13/client/src/ExamForm.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Alert, Form } from 'react-bootstrap';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { useState } from 'react';\nimport dayjs from 'dayjs';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ExamForm(props) {\n  _s();\n\n  const {\n    examId\n  } = useParams();\n  const examToEdit = props.exams.find(ex => ex.code === examId);\n  const [code, setCode] = useState(examToEdit ? examToEdit.code : '');\n  const [score, setScore] = useState(examToEdit ? examToEdit.score : 18);\n  const [date, setDate] = useState(examToEdit ? examToEdit.date : dayjs());\n  const [errorMsg, setErrorMsg] = useState(''); // stringa vuota '' = non c'e' errore\n\n  const navigate = useNavigate();\n\n  const handleSubmit = event => {\n    event.preventDefault(); // validation\n    // esempio: che non ci siano spazi nel nome del corso\n\n    if (!code) {\n      setErrorMsg('Selezionare un corso');\n    } else if (date.isAfter(dayjs())) {\n      setErrorMsg('La data non puÃ² essere futura');\n    } else {\n      // add\n      //const newExam = { code: code.trim(), name: name.trim(), score: score, date: date }\n      const name = props.courses.find(c => c.code === code).name;\n      const newExam = {\n        code: code,\n        name: name,\n        score: score,\n        date: date\n      };\n      props.addExam(newExam);\n      navigate('/');\n    }\n  };\n\n  const handleScore = event => {\n    const val = event.target.value;\n    setScore(val);\n    /* Careful with validation: either validate at the end in handleSubmit, or when focus is lost,\n       or consider that partial input may be invalid (difficult)\n         if (val<18)\n          setScore(18);\n        else if (val>31)\n          setScore(31);\n        else\n          setScore(val);\n    */\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Form  code: \", examId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [errorMsg ? /*#__PURE__*/_jsxDEV(Alert, {\n            variant: \"danger\",\n            onClose: () => setErrorMsg(''),\n            dismissible: true,\n            children: errorMsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this) : false, /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Course\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"select\",\n                value: code,\n                onChange: ev => setCode(ev.target.value),\n                disabled: examToEdit ? true : false,\n                children: examToEdit ? /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: examToEdit.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 33\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    disabled: true,\n                    hidden: true,\n                    value: \"\",\n                    children: \"choose...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 70,\n                    columnNumber: 21\n                  }, this), props.courses.filter(c => !props.exams.find(e => e.code === c.code)) // Avoid exams that are already present\n                  .map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: c.code,\n                    children: [c.name, \" \"]\n                  }, c.code, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 33\n                  }, this))]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Score\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"number\",\n                min: 18,\n                max: 31,\n                value: score,\n                onChange: ev => handleScore(ev)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"date\",\n                value: date.format('YYYY-MM-DD'),\n                onChange: ev => setDate(dayjs(ev.target.value))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => navigate('/'),\n              variant: \"secondary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ExamForm, \"53+mS6dQv72TKq+UKytBS27bDWg=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = ExamForm;\nexport default ExamForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExamForm\");","map":{"version":3,"sources":["/home/gaetano/Desktop/Projects/Web_Application/weeks/week13/client/src/ExamForm.js"],"names":["Button","Alert","Form","Container","Row","Col","useState","dayjs","useNavigate","useParams","ExamForm","props","examId","examToEdit","exams","find","ex","code","setCode","score","setScore","date","setDate","errorMsg","setErrorMsg","navigate","handleSubmit","event","preventDefault","isAfter","name","courses","c","newExam","addExam","handleScore","val","target","value","ev","filter","e","map","format"],"mappings":"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","sourcesContent":["import { Button, Alert, Form } from 'react-bootstrap';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { useState } from 'react';\nimport dayjs from 'dayjs';\nimport { useNavigate, useParams } from 'react-router-dom';\n\n\nfunction ExamForm(props) {\n  const { examId } = useParams();\n\n  const examToEdit = props.exams.find( (ex) => ex.code === examId );\n\n  const [code, setCode] = useState(examToEdit ? examToEdit.code : '');\n  const [score, setScore] = useState(examToEdit ? examToEdit.score : 18);\n  const [date, setDate] = useState(examToEdit ? examToEdit.date : dayjs());\n\n  const [errorMsg, setErrorMsg] = useState('');  // stringa vuota '' = non c'e' errore\n\n  const navigate = useNavigate();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // validation\n    // esempio: che non ci siano spazi nel nome del corso\n    if ( !code) {\n      setErrorMsg('Selezionare un corso');\n    } else if (date.isAfter(dayjs())) {\n      setErrorMsg('La data non puÃ² essere futura');\n    } else {\n      // add\n      //const newExam = { code: code.trim(), name: name.trim(), score: score, date: date }\n      const name = props.courses.find( c => c.code === code).name;\n      const newExam = { code: code, name: name, score: score, date: date}\n      props.addExam(newExam);\n      navigate('/');\n    }\n  }\n\n  const handleScore = (event) => {\n    const val = event.target.value;\n    setScore(val);\n    /* Careful with validation: either validate at the end in handleSubmit, or when focus is lost,\n       or consider that partial input may be invalid (difficult)\n\n        if (val<18)\n          setScore(18);\n        else if (val>31)\n          setScore(31);\n        else\n          setScore(val);\n    */\n  }\n\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col>\n            <h1>Form  code: {examId}</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            {errorMsg ? <Alert variant='danger' onClose={() => setErrorMsg('')} dismissible>{errorMsg}</Alert> : false}\n            <Form onSubmit={handleSubmit}>\n              <Form.Group>\n                <Form.Label>Course</Form.Label>\n                <Form.Control as=\"select\" value={code} onChange={ev => setCode(ev.target.value)} disabled={examToEdit ? true : false}>\n                  {examToEdit ? <option>{examToEdit.name}</option> :\n                  <><option disabled hidden value=''>choose...</option>\n                  {props.courses\n                      .filter(c => !props.exams.find(e => e.code === c.code))  // Avoid exams that are already present\n                      .map(c => <option key={c.code} value={c.code} >{c.name} </option>)}</>}\n                </Form.Control>\n              </Form.Group>\n              <Form.Group>\n                <Form.Label>Score</Form.Label>\n                <Form.Control type='number' min={18} max={31} value={score} onChange={ev => handleScore(ev)} />\n              </Form.Group>\n              <Form.Group>\n                <Form.Label>Date</Form.Label>\n                <Form.Control type='date' value={date.format('YYYY-MM-DD')} onChange={ev => setDate(dayjs(ev.target.value))} />\n              </Form.Group>\n              <Button type='submit' >Save</Button>\n              <Button onClick={ ()=> navigate('/')} variant='secondary' >Cancel</Button>\n            </Form>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default ExamForm;\n"]},"metadata":{},"sourceType":"module"}